package com.example.microservicesjavaapp.model;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents a Cart entity in the system.
 * This entity is mapped to the 'carts' table in the database.
 * Each cart is associated with a user and can contain multiple items.
 */
@Entity // Marks this class as a JPA entity
@Table(name = "carts") // Specifies the table name in the database
@Data // Lombok annotation to generate getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok annotation to generate a no-argument constructor
@AllArgsConstructor // Lombok annotation to generate an all-argument constructor
public class Cart {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id; // Unique identifier for the cart

    @ManyToOne // Defines a many-to-one relationship with the User entity
    @JoinColumn(name = "user_id", nullable = false) // Specifies the foreign key column in the 'carts' table
    @NotNull(message = "User cannot be null for a cart") // Validation constraint: user cannot be null
    private User user; // The user to whom this cart belongs

    @Column(nullable = false)
    private LocalDateTime createdAt; // Timestamp when the cart was created

    // Represents the items within this cart.
    // CascadeType.ALL ensures that operations (persist, merge, remove) on the Cart
    // are cascaded to its associated CartItem entities.
    // orphanRemoval = true ensures that if a CartItem is removed from the collection,
    // it's also removed from the database.
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    @OneToMany(mappedBy = "cart", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<CartItem> items = new HashSet<>(); // Collection of items in the cart

    // Enum to represent the status of the cart (e.g., ACTIVE, PROCESSED)
    public enum CartStatus {
        ACTIVE,
        PROCESSED
    }

    @Column(nullable = false)
    @NotNull(message = "Cart status cannot be null")
    private CartStatus status; // The current status of the cart

    /**
     * Pre-persists hook to set creation timestamp and initial status.
     * This method is called automatically before the entity is first persisted to the database.
     */
    @jakarta.persistence.PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = LocalDateTime.now();
        }
        if (status == null) {
            status = CartStatus.ACTIVE; // Default status for a new cart
        }
    }
}