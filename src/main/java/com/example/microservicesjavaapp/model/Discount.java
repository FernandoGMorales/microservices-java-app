package com.example.microservicesjavaapp.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;

/**
 * Represents a Discount entity in the system.
 * This entity is mapped to the 'discounts' table in the database.
 * Discounts are applied based on product categories and have a percentage value.
 */
@Entity // Marks this class as a JPA entity
@Table(name = "discounts") // Specifies the table name in the database
@Data // Lombok annotation to generate getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok annotation to generate a no-argument constructor
@AllArgsConstructor // Lombok annotation to generate an all-argument constructor
public class Discount {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id; // Unique identifier for the discount

    @Column(unique = true, nullable = false) // Ensures the category is unique for each discount and not null
    @NotBlank(message = "Category cannot be empty") // Validation constraint: category cannot be blank
    private String category; // The product category to which this discount applies

    @Column(nullable = false) // Ensures the discount percentage is not null
    @NotNull(message = "Discount percentage cannot be null") // Validation constraint: discount percentage cannot be null
    @DecimalMin(value = "0.01", message = "Discount percentage must be greater than 0") // Validation constraint: min 0.01%
    @DecimalMax(value = "100.00", message = "Discount percentage cannot exceed 100") // Validation constraint: max 100%
    private BigDecimal percentage; // The discount percentage (e.g., 10.00 for 10%)
}